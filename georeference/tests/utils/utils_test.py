#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Created by jacob.mendt@pikobytes.de on 09.03.22
#
# This file is subject to the terms and conditions defined in file
# "LICENSE", which is part of this source code package
import json
from datetime import datetime

from georeference.models.georef_map import GeorefMap
from georeference.models.raw_map import RawMap
from georeference.models.transformation import Transformation, EnumValidationValue
from georeference.utils.utils import (
    fix_polygon_geometry,
    get_geometry,
    get_tms_directory,
    bbox_position,
)


def test_fix_polygon_geometry():
    """PostGIS delivers some different geometries which fail in indexing within elasticsearch. Therefor
    we wrap the indexing document with a fix function."""

    # Testing the failure "Cannot determine orientation: edges adjacent to (12.918936638,50.821263223) coincide"
    wrong_geometry = {
        "type": "Polygon",
        "coordinates": [
            [
                [12.902164939, 50.832924593],
                [12.926070869, 50.846519257],
                [12.942717406, 50.834979854],
                [12.918936638, 50.821263223],
                [12.918936638, 50.821263223],
                [12.902164939, 50.832924593],
            ]
        ],
    }
    correct_geometry = {
        "type": "Polygon",
        "coordinates": [
            [
                [12.902164939, 50.832924593],
                [12.926070869, 50.846519257],
                [12.942717406, 50.834979854],
                [12.918936638, 50.821263223],
                [12.902164939, 50.832924593],
            ]
        ],
    }
    test_geometry = fix_polygon_geometry(wrong_geometry)
    assert json.dumps(correct_geometry) == json.dumps(test_geometry)

    # Testing that a MultiPolygon is correctly resolved
    wrong_geometry = {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [13.743425261, 51.012900133],
                    [13.743429787, 51.012902348],
                    [13.743442947, 51.012908887],
                    [13.743457783, 51.01291627],
                    [13.745171192, 51.013894361],
                    [13.745514516, 51.014096852],
                    [13.745793467, 51.014245346],
                    [13.746104604, 51.014434337],
                    [13.746286995, 51.014542332],
                    [13.746490844, 51.014650326],
                    [13.746683964, 51.014765069],
                    [13.747166763, 51.015035053],
                    [13.747595919, 51.015284787],
                    [13.748658078, 51.015885492],
                    [13.75016012, 51.016722416],
                    [13.750439071, 51.016897899],
                    [13.750996973, 51.017221864],
                    [13.751147178, 51.017302855],
                    [13.751372484, 51.017424342],
                    [13.751801639, 51.017653815],
                    [13.754054703, 51.018882151],
                    [13.754483857, 51.019111617],
                    [13.754794995, 51.019280341],
                    [13.755095403, 51.019435567],
                    [13.755342167, 51.019577294],
                    [13.75617902, 51.020049716],
                    [13.760528683, 51.022462363],
                    [13.764530553, 51.024652197],
                    [13.76897499, 51.027105093],
                    [13.789274028, 51.038561473],
                    [13.811917324, 51.0512425],
                    [13.813482818, 51.050028489],
                    [13.814762207, 51.049111211],
                    [13.821413973, 51.044254737],
                    [13.823979912, 51.042359226],
                    [13.824221307, 51.042183836],
                    [13.824569988, 51.041917378],
                    [13.826692469, 51.040315223],
                    [13.828494883, 51.039019967],
                    [13.829996895, 51.037913573],
                    [13.830211468, 51.037778645],
                    [13.8305977, 51.037508788],
                    [13.831327248, 51.036942084],
                    [13.833667884, 51.035211569],
                    [13.833753714, 51.035147475],
                    [13.8352146, 51.034135446],
                    [13.840266008, 51.030481839],
                    [13.840732705, 51.030141091],
                    [13.842045176, 51.029142448],
                    [13.863387161, 51.014072475],
                    [13.864022833, 51.013588171],
                    [13.865095698, 51.012776486],
                    [13.865267357, 51.012663423],
                    [13.865286132, 51.012648235],
                    [13.865388054, 51.012570609],
                    [13.865511249, 51.012501417],
                    [13.865736551, 51.012336039],
                    [13.86610669, 51.012055909],
                    [13.866289077, 51.011917531],
                    [13.86709838, 51.011308329],
                    [13.867264675, 51.01119695],
                    [13.867720643, 51.010886436],
                    [13.867913759, 51.01075818],
                    [13.868010317, 51.010697427],
                    [13.876407277, 51.004790496],
                    [13.874046925, 51.00352803],
                    [13.873821618, 51.003406507],
                    [13.867952926, 51.000334581],
                    [13.863110982, 50.997674329],
                    [13.837492307, 50.983453916],
                    [13.837435981, 50.9834269],
                    [13.833845832, 50.981520496],
                    [13.829052705, 50.978771352],
                    [13.818288957, 50.972624028],
                    [13.803400494, 50.964438721],
                    [13.780996908, 50.980284737],
                    [13.780031328, 50.9809467],
                    [13.779280321, 50.981433034],
                    [13.738569353, 51.010164977],
                    [13.741085277, 51.011616266],
                    [13.742115249, 51.012196769],
                    [13.742130336, 51.012203941],
                    [13.742244331, 51.012258784],
                    [13.742421357, 51.012349909],
                    [13.742446838, 51.012362143],
                    [13.742627553, 51.012480268],
                    [13.742777757, 51.012561267],
                    [13.74303525, 51.01269964],
                    [13.743223676, 51.012797514],
                    [13.74325318, 51.012813545],
                    [13.743367845, 51.012871763],
                    [13.743374634, 51.012875243],
                    [13.743380313, 51.012877959],
                    [13.743380648, 51.012878091],
                    [13.743383519, 51.012879673],
                    [13.743387899, 51.012881782],
                    [13.743399717, 51.012888374],
                    [13.743400241, 51.012888585],
                    [13.743400933, 51.01288898],
                    [13.743401035, 51.012889109],
                    [13.743401226, 51.012889086],
                    [13.743401181, 51.012889132],
                    [13.743401394, 51.012889165],
                    [13.743404767, 51.012890641],
                    [13.743411431, 51.0128937],
                    [13.743416837, 51.012896389],
                    [13.743425261, 51.012900133],
                ]
            ],
            [
                [
                    [13.74340103, 51.012889109],
                    [13.743401036, 51.01288911],
                    [13.743401035, 51.012889109],
                    [13.74340103, 51.012889109],
                ]
            ],
            [
                [
                    [13.743401111, 51.012889204],
                    [13.743401181, 51.012889132],
                    [13.743401036, 51.01288911],
                    [13.743401111, 51.012889204],
                ]
            ],
            [
                [
                    [13.74340088, 51.012889086],
                    [13.743400943, 51.012889096],
                    [13.743400943, 51.012889086],
                    [13.74340088, 51.012889086],
                ]
            ],
            [
                [
                    [13.743400943, 51.012889096],
                    [13.743400943, 51.012889106],
                    [13.743401006, 51.012889112],
                    [13.74340103, 51.012889109],
                    [13.743400943, 51.012889096],
                ]
            ],
            [
                [
                    [13.743400943, 51.012889112],
                    [13.743400943, 51.012889106],
                    [13.74340088, 51.012889099],
                    [13.743400943, 51.012889125],
                    [13.743401069, 51.012889178],
                    [13.743400943, 51.012889112],
                ]
            ],
        ],
    }
    correct_geometry = {
        "type": "Polygon",
        "coordinates": [
            [
                [13.743425261, 51.012900133],
                [13.743429787, 51.012902348],
                [13.743442947, 51.012908887],
                [13.743457783, 51.01291627],
                [13.745171192, 51.013894361],
                [13.745514516, 51.014096852],
                [13.745793467, 51.014245346],
                [13.746104604, 51.014434337],
                [13.746286995, 51.014542332],
                [13.746490844, 51.014650326],
                [13.746683964, 51.014765069],
                [13.747166763, 51.015035053],
                [13.747595919, 51.015284787],
                [13.748658078, 51.015885492],
                [13.75016012, 51.016722416],
                [13.750439071, 51.016897899],
                [13.750996973, 51.017221864],
                [13.751147178, 51.017302855],
                [13.751372484, 51.017424342],
                [13.751801639, 51.017653815],
                [13.754054703, 51.018882151],
                [13.754483857, 51.019111617],
                [13.754794995, 51.019280341],
                [13.755095403, 51.019435567],
                [13.755342167, 51.019577294],
                [13.75617902, 51.020049716],
                [13.760528683, 51.022462363],
                [13.764530553, 51.024652197],
                [13.76897499, 51.027105093],
                [13.789274028, 51.038561473],
                [13.811917324, 51.0512425],
                [13.813482818, 51.050028489],
                [13.814762207, 51.049111211],
                [13.821413973, 51.044254737],
                [13.823979912, 51.042359226],
                [13.824221307, 51.042183836],
                [13.824569988, 51.041917378],
                [13.826692469, 51.040315223],
                [13.828494883, 51.039019967],
                [13.829996895, 51.037913573],
                [13.830211468, 51.037778645],
                [13.8305977, 51.037508788],
                [13.831327248, 51.036942084],
                [13.833667884, 51.035211569],
                [13.833753714, 51.035147475],
                [13.8352146, 51.034135446],
                [13.840266008, 51.030481839],
                [13.840732705, 51.030141091],
                [13.842045176, 51.029142448],
                [13.863387161, 51.014072475],
                [13.864022833, 51.013588171],
                [13.865095698, 51.012776486],
                [13.865267357, 51.012663423],
                [13.865286132, 51.012648235],
                [13.865388054, 51.012570609],
                [13.865511249, 51.012501417],
                [13.865736551, 51.012336039],
                [13.86610669, 51.012055909],
                [13.866289077, 51.011917531],
                [13.86709838, 51.011308329],
                [13.867264675, 51.01119695],
                [13.867720643, 51.010886436],
                [13.867913759, 51.01075818],
                [13.868010317, 51.010697427],
                [13.876407277, 51.004790496],
                [13.874046925, 51.00352803],
                [13.873821618, 51.003406507],
                [13.867952926, 51.000334581],
                [13.863110982, 50.997674329],
                [13.837492307, 50.983453916],
                [13.837435981, 50.9834269],
                [13.833845832, 50.981520496],
                [13.829052705, 50.978771352],
                [13.818288957, 50.972624028],
                [13.803400494, 50.964438721],
                [13.780996908, 50.980284737],
                [13.780031328, 50.9809467],
                [13.779280321, 50.981433034],
                [13.738569353, 51.010164977],
                [13.741085277, 51.011616266],
                [13.742115249, 51.012196769],
                [13.742130336, 51.012203941],
                [13.742244331, 51.012258784],
                [13.742421357, 51.012349909],
                [13.742446838, 51.012362143],
                [13.742627553, 51.012480268],
                [13.742777757, 51.012561267],
                [13.74303525, 51.01269964],
                [13.743223676, 51.012797514],
                [13.74325318, 51.012813545],
                [13.743367845, 51.012871763],
                [13.743374634, 51.012875243],
                [13.743380313, 51.012877959],
                [13.743380648, 51.012878091],
                [13.743383519, 51.012879673],
                [13.743387899, 51.012881782],
                [13.743399717, 51.012888374],
                [13.743400241, 51.012888585],
                [13.743400933, 51.01288898],
                [13.743401035, 51.012889109],
                [13.743401226, 51.012889086],
                [13.743401181, 51.012889132],
                [13.743401394, 51.012889165],
                [13.743404767, 51.012890641],
                [13.743411431, 51.0128937],
                [13.743416837, 51.012896389],
                [13.743425261, 51.012900133],
            ]
        ],
    }
    test_geometry = fix_polygon_geometry(wrong_geometry)
    assert json.dumps(correct_geometry) == json.dumps(test_geometry)


def test_get_geometry_use_clip_polygon(readonly_db_session):
    """The test checks if checks the clip polygon is used for geometry if set.

    :param readonly_db_session: Database session
    :type readonly_db_session: sqlalchemy.orm.session.Session
    :return:
    """
    # Create the test data
    map_id = 10007521

    # Build test request
    subject = get_geometry(map_id, readonly_db_session)

    assert subject["type"] == "Polygon"


def test_get_geometry_use_clip_polygon_from_multipolygon(readonly_db_session):
    """The test checks if checks the clip polygon is used for geometry if set.

    :param readonly_db_session: Database session
    :type readonly_db_session: sqlalchemy.orm.session.Session
    :return:
    """
    # Create the test data
    map_id = 10007521
    transformation_id = 8999

    readonly_db_session.add(
        Transformation(
            id=transformation_id,
            submitted=datetime.now().isoformat(),
            user_id="test",
            params=json.dumps(
                {
                    "source": "pixel",
                    "target": "EPSG:4326",
                    "algorithm": "affine",
                    "gcps": [
                        {
                            "source": [4719, 1380],
                            "target": [10.714308619959, 48.755628213793],
                        },
                        {
                            "source": [2809, 1340],
                            "target": [10.669971704948, 48.755836873379],
                        },
                        {
                            "source": [1414, 964],
                            "target": [10.636985302208, 48.76146858635],
                        },
                        {
                            "source": [988, 3018],
                            "target": [10.627818108085, 48.729436326083],
                        },
                        {
                            "source": [2885, 5235],
                            "target": [10.672315955649, 48.695646899534],
                        },
                        {
                            "source": [6063, 4201],
                            "target": [10.746548176053, 48.712192253709],
                        },
                        {
                            "source": [2739, 3238],
                            "target": [10.668661594173, 48.726582481426],
                        },
                        {
                            "source": [1664, 4171],
                            "target": [10.643736719976, 48.711748022874],
                        },
                        {
                            "source": [5797, 746],
                            "target": [10.739638209288, 48.765643779367],
                        },
                        {
                            "source": [6125, 4814],
                            "target": [10.748037099729, 48.70257582834],
                        },
                    ],
                }
            ),
            clip=json.dumps(
                {
                    "type": "Polygon",
                    "coordinates": [
                        [
                            [14.799189345, 50.89943374],
                            [14.811818315, 50.899957856],
                            [14.812090785, 50.892868908],
                            [14.797718009, 50.892877501],
                            [14.797690762, 50.892765788],
                            [14.797949608, 50.892774382],
                            [14.799189345, 50.89943374],
                        ]
                    ],
                }
            ),
            target_crs=4326,
            validation=EnumValidationValue.VALID.value,
            raw_map_id=map_id,
            overwrites=0,
            comment=None,
        )
    )
    readonly_db_session.flush()

    # Update temporary reference of the current georef id
    georef_map_obj = GeorefMap.by_raw_map_id(map_id, readonly_db_session)
    georef_map_obj.transformation_id = transformation_id

    # Build test request
    subject = get_geometry(map_id, readonly_db_session)

    assert subject["type"] == "Polygon"


def test_get_geometry_use_extent_polygon(readonly_db_session):
    """The test checks if checks the extent is used for geometry if clip polygon is not set.

    :param readonly_db_session: Database session
    :type readonly_db_session: sqlalchemy.orm.session.Session
    :return:
    """
    # Create the test data
    map_id = 10007521

    # Get relevant data objects
    georef_map = GeorefMap.by_raw_map_id(map_id, readonly_db_session)

    # Set transformation to null
    transformation = Transformation.by_id(
        georef_map.transformation_id, readonly_db_session
    )
    transformation.clip = None

    # Build test request
    subject = get_geometry(map_id, readonly_db_session)
    assert subject["type"] == "Polygon"

    readonly_db_session.rollback()


def test_get_tms_directory_success():
    """Checks if the function returns correct string."""
    dummy_raw_map_obj = RawMap(
        id=1,
        file_name="df_dk_0010001_3352_191s8",
        enabled=False,
        map_type="M",
        default_crs=4314,
        rel_path="",
        map_scale=1000,
        allow_download=True,
    )
    subject = get_tms_directory(dummy_raw_map_obj)

    assert isinstance(subject, str)
    assert "m/df_dk_0010001_3352_191s8" in subject


def test_bbox_position_north():
    bbox = [0, 0, 0, 3]
    container = [0, 0, 1, 1]
    is_contained, position = bbox_position(bbox, container)

    assert is_contained is False
    assert position == "north"


def test_bbox_position_east():
    bbox = [0, 0, 3, 0]
    container = [0, 0, 1, 1]
    is_contained, position = bbox_position(bbox, container)

    assert is_contained is False
    assert position == "east"


def test_bbox_position_south():
    bbox = [0, -3, 0, 0]
    container = [0, 0, 1, 1]
    is_contained, position = bbox_position(bbox, container)

    assert is_contained is False
    assert position == "south"


def test_bbox_position_west():
    bbox = [-3, 0, 0, 0]
    container = [0, 0, 1, 1]
    is_contained, position = bbox_position(bbox, container)

    assert is_contained is False
    assert position == "west"


def test_bbox_position_contained():
    bbox = [0.5, 0.5, 0.9, 0.9]
    container = [0, 0, 1, 1]
    is_contained, position = bbox_position(bbox, container)

    assert is_contained is True
    assert position is None
